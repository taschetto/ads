identifiers

  TAXA = 1

events

  loc commit1 (TAXA);
  loc test_fail1 (TAXA);
  loc commit2 (TAXA);
  loc test_fail2 (TAXA);
  loc commit3 (TAXA);
  loc test_fail3 (TAXA);
  loc commit4 (TAXA);
  loc test_fail4 (TAXA);
  loc commit5 (TAXA);
  loc test_fail5 (TAXA);
  syn pronto_para_rc (TAXA);
  syn rc_rejeitada (TAXA);
  syn versao_promovida (TAXA);

partial reachability = ((st F1 == ALPHA) && (st F2 == ALPHA) && (st F3 == ALPHA) && (st F4 == ALPHA) && (st F5 == ALPHA) && (st P == PRODUCAO));

network FEATURES (continuous)

  aut F1
    stt ALPHA to (TESTES_DEV) commit1
    stt TESTES_DEV to (ALPHA) test_fail1
    stt BETA_FALHA to (TESTES_DEV) commit1
    stt BETA_ACEITA to (TESTES_DEV) commit1
    stt TESTES_DEV to (BETA) pronto_para_rc
    stt BETA to (BETA_FALHA) rc_rejeitada
    stt BETA to (BETA_ACEITA) versao_promovida

  aut F2
    stt ALPHA to (TESTES_DEV) commit2
    stt TESTES_DEV to (ALPHA) test_fail2
    stt BETA_FALHA to (TESTES_DEV) commit2
    stt BETA_ACEITA to (TESTES_DEV) commit2
    stt TESTES_DEV to (BETA) pronto_para_rc
    stt BETA to (BETA_FALHA) rc_rejeitada
    stt BETA to (BETA_ACEITA) versao_promovida

  aut F3
    stt ALPHA to (TESTES_DEV) commit3
    stt TESTES_DEV to (ALPHA) test_fail3
    stt BETA_FALHA to (TESTES_DEV) commit3
    stt BETA_ACEITA to (TESTES_DEV) commit3
    stt TESTES_DEV to (BETA) pronto_para_rc
    stt BETA to (BETA_FALHA) rc_rejeitada
    stt BETA to (BETA_ACEITA) versao_promovida

  aut F4
    stt ALPHA to (TESTES_DEV) commit4
    stt TESTES_DEV to (ALPHA) test_fail4
    stt BETA_FALHA to (TESTES_DEV) commit4
    stt BETA_ACEITA to (TESTES_DEV) commit4
    stt TESTES_DEV to (BETA) pronto_para_rc
    stt BETA to (BETA_FALHA) rc_rejeitada
    stt BETA to (BETA_ACEITA) versao_promovida

  aut F5
    stt ALPHA to (TESTES_DEV) commit5
    stt TESTES_DEV to (ALPHA) test_fail5
    stt BETA_FALHA to (TESTES_DEV) commit5
    stt BETA_ACEITA to (TESTES_DEV) commit5
    stt TESTES_DEV to (BETA) pronto_para_rc
    stt BETA to (BETA_FALHA) rc_rejeitada
    stt BETA to (BETA_ACEITA) versao_promovida

  aut P
    stt RC to (TESTES_RC) pronto_para_rc
    stt TESTES_RC to (TC) rc_rejeitada
    stt TESTES_RC to (PRODUCAO) versao_promovida
    stt PRODUCAO to (TESTES_RC) pronto_para_rc

results

P1_OFF = (st P1 == OFF); // probabilidade do automato P1 estar no estado OFF
P1_ON_ = (st P1 == ON);  // probabilidade do automato P1 estar no estado ON
P2_OFF = (st P2 == OFF); // probabilidade do automato P2 estar no estado OFF
P2_ON_ = (st P2 == ON);  // probabilidade do automato P2 estar no estado ON
P3_OFF = (st P3 == OFF); // probabilidade do automato P3 estar no estado OFF
P3_ON_ = (st P3 == ON);  // probabilidade do automato P3 estar no estado ON

// probabilidade de todos os automatos estarem no estado OFF
OFF_OFF_OFF = ((st P1 == OFF) && (st P2 == OFF) && (st P3 == OFF));