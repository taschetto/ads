identifiers
  UN = 480; // minutos de trabalhos por dia

  TAXA_COMMIT1    = (UN/60);    // a cada 60 minutos
  TAXA_REJECT1    = (UN/60/2);  // a cada 120 minutos
  TAXA_CI_FAILS1  = (UN/480);   // a cada 480 minutos
  TAXA_CI_PASSES1 = (UN/480/2); // a cada 840 minutos (e por a√≠ vai)

  TAXA_COMMIT2    = (UN/240);
  TAXA_REJECT2    = (UN/240/3);
  TAXA_CI_FAILS2  = (UN/480/3);
  TAXA_CI_PASSES2 = (UN/480/4);

  TAXA_DEPLOY     = (UN/480/5);
  TAXA_SUCCESS    = (UN/480);
  TAXA_ROLLBACK   = (UN/480/3);
  TAXA_MERGE      = (UN/30);
  
  TAXA_RUN_TESTS  = (UN/10);

events
  loc commit1    (TAXA_COMMIT1);
  loc reject1    (TAXA_REJECT1);
  syn ci_fails1  (TAXA_CI_FAILS1);
  syn ci_passes1 (TAXA_CI_PASSES1);

  loc commit2    (TAXA_COMMIT2);
  loc reject2    (TAXA_REJECT2);
  syn ci_fails2  (TAXA_CI_FAILS2);
  syn ci_passes2 (TAXA_CI_PASSES2);

  loc deploy     (TAXA_DEPLOY);
  loc success    (TAXA_SUCCESS);
  loc rollback   (TAXA_ROLLBACK);
  syn merge      (TAXA_MERGE);

  syn run_tests  (TAXA_RUN_TESTS);

partial reachability = (
    (st D1 == DEV) &&
    (st D2 == DEV) &&
    (st MAIN == PRODUCTION) &&
    (st CI_SERVER == IDLE)
);

network DEVS (continuous)
  aut D1
    stt DEV to (CI_RUNNING) run_tests
    stt CI_RUNNING to (FAILED) ci_fails1
                   to (READY) ci_passes1
    stt FAILED to (DEV) commit1
    stt READY to (REJECTED) reject1
              to (MERGED) merge
    stt REJECTED to (DEV) commit1
    stt MERGED to (DEV) commit1

  aut D2
    stt DEV to (CI_RUNNING) run_tests
    stt CI_RUNNING to (FAILED) ci_fails2
                   to (READY) ci_passes2
    stt FAILED to (DEV) commit2
    stt READY to (REJECTED) reject2
              to (MERGED) merge
    stt REJECTED to (DEV) commit2
    stt MERGED to (DEV) commit2

  aut MAIN
    stt PRODUCTION to (TESTING) merge
    stt TESTING to (PRODUCTION) rollback
                to (STAGING) success
    stt STAGING to (PRODUCTION) deploy

  aut CI_SERVER
    stt RUNNING to (IDLE) ci_passes1 ci_passes2 ci_fails1 ci_fails2
    stt IDLE to (RUNNING) run_tests

results
  D1_DEV      = (st D1 == DEV);
  D1_CI       = (st D1 == CI_RUNNING);
  D1_READY    = (st D1 == READY);
  D1_FAILED   = (st D1 == FAILED);
  D1_REJECTED = (st D1 == REJECTED);
  D1_MERGED   = (st D1 == MERGED);

  MAIN_PRODUCTION = (st MAIN == PRODUCTION);
  MAIN_TESTING = (st MAIN == TESTING);
  MAIN_STAGING = (st MAIN == STAGING);

  CI_SERVER_RUNNING = (st CI_SERVER == RUNNING);
  CI_SERVER_IDLE = (st CI_SERVER == IDLE);
