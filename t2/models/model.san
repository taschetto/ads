identifiers
  UN = 480; // minutos de trabalhos por dia

  TAXA_COMMIT1    = (UN/60);
  TAXA_REJECT1    = (UN/60/2);
  TAXA_CI_FAILS1  = 0.001;
  TAXA_CI_PASSES1 = 0.001;

  TAXA_COMMIT2    = (UN/240);
  TAXA_REJECT2    = (UN/60/3);
  TAXA_CI_FAILS2  = 0.03;
  TAXA_CI_PASSES2 = 0.01;

  TAXA_COMMIT3    = (UN/120);
  TAXA_REJECT3    = (UN/60/4);
  TAXA_CI_FAILS3  = 0.01;
  TAXA_CI_PASSES3 = 0.03;

  TAXA_COMMIT4    = (UN/480);
  TAXA_REJECT4    = (UN/60/5);
  TAXA_CI_FAILS4  = 0.002;
  TAXA_CI_PASSES4 = 0.005;

  TAXA_DEPLOY     = 0.15;
  TAXA_SUCCESS    = 0.3;
  TAXA_ROLLBACK   = 0.3;
  TAXA_MERGE      = 10;
  
  TAXA_RUN_TESTS  = (UN/10);

events
  loc commit1    (TAXA_COMMIT1);
  loc reject1    (TAXA_REJECT1);
  syn ci_fails1  (TAXA_CI_FAILS1);
  syn ci_passes1 (TAXA_CI_PASSES1);

  loc commit2    (TAXA_COMMIT2);
  loc reject2    (TAXA_REJECT2);
  syn ci_fails2  (TAXA_CI_FAILS2);
  syn ci_passes2 (TAXA_CI_PASSES2);

  loc commit3    (TAXA_COMMIT3);
  loc reject3    (TAXA_REJECT3);
  syn ci_fails3  (TAXA_CI_FAILS3);
  syn ci_passes3 (TAXA_CI_PASSES3);

  loc commit4    (TAXA_COMMIT4);
  loc reject4    (TAXA_REJECT4);
  syn ci_fails4  (TAXA_CI_FAILS4);
  syn ci_passes4 (TAXA_CI_PASSES4);

  loc deploy     (TAXA_DEPLOY);
  loc success    (TAXA_SUCCESS);
  loc rollback   (TAXA_ROLLBACK);
  syn merge      (TAXA_MERGE);

  syn run_tests  (TAXA_RUN_TESTS);

partial reachability = (
    (st D1 == DEV) &&
    (st D2 == DEV) &&
    (st D3 == DEV) &&
    (st D4 == DEV) &&
    (st MAIN == PRODUCTION) &&
    (st CI_SERVER == IDLE)
);

network DEVS (continuous)
  aut D1
    stt DEV to (CI_RUNNING) run_tests
    stt CI_RUNNING to (FAILED) ci_fails1
                   to (READY) ci_passes1
    stt FAILED to (DEV) commit1
    stt READY to (REJECTED) reject1
              to (MERGED) merge
    stt REJECTED to (DEV) commit1
    stt MERGED to (DEV) commit1

  aut D2
    stt DEV to (CI_RUNNING) run_tests
    stt CI_RUNNING to (FAILED) ci_fails2
                   to (READY) ci_passes2
    stt FAILED to (DEV) commit2
    stt READY to (REJECTED) reject2
              to (MERGED) merge
    stt REJECTED to (DEV) commit2
    stt MERGED to (DEV) commit2

  aut D3
    stt DEV to (CI_RUNNING) run_tests
    stt CI_RUNNING to (FAILED) ci_fails3
                   to (READY) ci_passes3
    stt FAILED to (DEV) commit3
    stt READY to (REJECTED) reject3
              to (MERGED) merge
    stt REJECTED to (DEV) commit3
    stt MERGED to (DEV) commit3

  aut D4
    stt DEV to (CI_RUNNING) run_tests
    stt CI_RUNNING to (FAILED) ci_fails4
                   to (READY) ci_passes4
    stt FAILED to (DEV) commit4
    stt READY to (REJECTED) reject4
              to (MERGED) merge
    stt REJECTED to (DEV) commit4
    stt MERGED to (DEV) commit4

  aut MAIN
    stt PRODUCTION to (TESTING) merge
    stt TESTING to (PRODUCTION) rollback
                to (STAGING) success
    stt STAGING to (PRODUCTION) deploy

  aut CI_SERVER
    stt RUNNING to (IDLE) ci_passes1 ci_passes2 ci_passes3 ci_passes4 ci_fails1 ci_fails2 ci_fails3 ci_fails4
    stt IDLE to (RUNNING) run_tests

results
  D1_DEV      = (st D1 == DEV);
  D1_CI       = (st D1 == CI_RUNNING);
  D1_READY    = (st D1 == READY);
  D1_FAILED   = (st D1 == FAILED);
  D1_REJECTED = (st D1 == REJECTED);
  D1_MERGED   = (st D1 == MERGED);

  MAIN_PRODUCTION = (st MAIN == PRODUCTION);
  MAIN_TESTING = (st MAIN == TESTING);
  MAIN_STAGING = (st MAIN == STAGING);

  CI_SERVER_RUNNING = (st CI_SERVER == RUNNING);
  CI_SERVER_IDLE = (st CI_SERVER == IDLE);
