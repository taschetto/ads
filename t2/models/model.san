identifiers
  UN = 480; // minutos de trabalhos por dia

  TAXA_COMMIT1    = (UN/60);    // a cada 60 minutos
  TAXA_CI_FAILS1  = (UN/480);   // a cada 480 minutos
  TAXA_CI_PASSES1 = (UN/480/2); // a cada 840 minutos
  TAXA_RUN_TESTS1 = (UN/120);   // a cada 120 minutos (e por a√≠ vai)

  TAXA_COMMIT2    = (UN/240);
  TAXA_CI_FAILS2  = (UN/480/3);
  TAXA_CI_PASSES2 = (UN/480/4);
  TAXA_RUN_TESTS2 = (UN/180);

  TAXA_COMMIT3    = (UN/120);
  TAXA_CI_FAILS3  = (UN/240/3);
  TAXA_CI_PASSES3 = (UN/360/4);
  TAXA_RUN_TESTS3 = (UN/30);

  TAXA_DEPLOY     = (UN/480/15);
  TAXA_SUCCESS    = (UN/480);
  TAXA_ROLLBACK   = (UN/480/3);
  TAXA_MERGE      = (UN/30);

events
  loc c1 (TAXA_COMMIT1);
  syn r1 (TAXA_RUN_TESTS1);
  syn f1 (TAXA_CI_FAILS1);
  syn p1 (TAXA_CI_PASSES1);

  loc c2 (TAXA_COMMIT2);
  syn r2 (TAXA_RUN_TESTS2);
  syn f2 (TAXA_CI_FAILS2);
  syn p2 (TAXA_CI_PASSES2);

  loc c3 (TAXA_COMMIT2);
  syn r3 (TAXA_RUN_TESTS3);
  syn f3 (TAXA_CI_FAILS2);
  syn p3 (TAXA_CI_PASSES2);

  loc dep (TAXA_DEPLOY);
  loc suc (TAXA_SUCCESS);
  loc rol (TAXA_ROLLBACK);
  syn mer (TAXA_MERGE);

partial reachability = (
    (st D1   == DEV)        &&
    (st D2   == DEV)        &&
    (st D3   == DEV)        &&
    (st MAIN == PRODUCTION) &&
    (st CI  == IDLE)      
);

network DEVS (continuous)
  aut D1
    stt DEV        to (RUNNING) r1
    stt RUNNING    to (FAILED)  f1
                   to (READY)   p1
    stt FAILED     to (DEV)     c1
    stt READY      to (MERGED)  mer
    stt MERGED     to (DEV)     c1

  aut D2
    stt DEV        to (RUNNING) r2
    stt RUNNING    to (FAILED)  f2
                   to (READY)   p2
    stt FAILED     to (DEV)     c2
    stt READY      to (MERGED)  mer
    stt MERGED     to (DEV)     c2

  aut D3
    stt DEV        to (RUNNING) r3
    stt RUNNING    to (FAILED)  f3
                   to (READY)   p3
    stt FAILED     to (DEV)     c3
    stt READY      to (MERGED)  mer
    stt MERGED     to (DEV)     c3

  aut CI
    stt IDLE       to (RUNNING) r1 r2 r3
    stt RUNNING    to (IDLE)    p1 f1 p2 f2 p3 f3 

  aut MAIN
    stt PRODUCTION to (TESTING)    mer
    stt TESTING    to (PRODUCTION) rol
                   to (STAGING)    suc
    stt STAGING    to (PRODUCTION) dep

results
  D1_DEV      = (st D1 == DEV);
  D1_CI       = (st D1 == RUNNING);
  D1_READY    = (st D1 == READY);
  D1_FAILED   = (st D1 == FAILED);
  D1_MERGED   = (st D1 == MERGED);
  D2_DEV      = (st D2 == DEV);
  D2_CI       = (st D2 == RUNNING);
  D2_READY    = (st D2 == READY);
  D2_FAILED   = (st D2 == FAILED);
  D2_MERGED   = (st D2 == MERGED);
  D3_DEV      = (st D3 == DEV);
  D3_CI       = (st D3 == RUNNING);
  D3_READY    = (st D3 == READY);
  D3_FAILED   = (st D3 == FAILED);
  D3_MERGED   = (st D3 == MERGED);

  MAIN_PRODUCTION = (st MAIN == PRODUCTION);
  MAIN_TESTING    = (st MAIN == TESTING);
  MAIN_STAGING    = (st MAIN == STAGING);

  CI_RUNNING = (st CI != IDLE);
